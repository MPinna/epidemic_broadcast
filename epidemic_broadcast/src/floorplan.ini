[General]
network = Floorplan
sim-time-limit = 1200s
seed-set = ${repetition}
num-rngs = 3
Floorplan.host[*].procUnit.rng-0=0
Floorplan.host[*].mobility.rng-1=1
Floorplan.host[*].mobility.rng-2=2
Floorplan.vector-recording = true
Floorplan.height = 100m
Floorplan.width = 100m

# lower bound for hosts coordinates
Floorplan.host[*].mobility.constraintAreaMinX = 0m
Floorplan.host[*].mobility.constraintAreaMinY = 0m
Floorplan.host[*].mobility.constraintAreaMinZ = 0m
Floorplan.host[*].mobility.constraintAreaMaxZ = 0m

# time slot duration in seconds
Floorplan.host[*].procUnit.slotLength = 1

# default success probability for the Bernoulli RV
Floorplan.host[*].procUnit.p = 1

# needed to make restart and shutdown possible
Floorplan.host[*].hasStatus = true

# hosts are stationary
Floorplan.host[*].mobility.typename = "StationaryMobility" 

# hosts all lie on the same horizontal plane
Floorplan.host[*].mobility.initialZ = 0m

# this is the node that produces the first message and
# starts the broadcast
Floorplan.host[0].procUnit.hasInitToken = 1 # the initial token
Floorplan.host[0].stat = "green" # set the status of the initial transmitter

# set UnitDisk as radio module for the hosts
Floorplan*.host[*].wlan.radio.typename = "UnitDiskRadio"

# must be set high enough to complete the transission inside 1 slot
# 1 Mpbs is good and is also realistic with respect to Bluetooth LE
Floorplan.host[*].**.bitrate = 1Mbps

# a transmission can be as long as the whole slot
Floorplan.radioMedium.mediumLimitCache.maxTransmissionDuration = 1s

# we want to model collisions too
Floorplan.host[*].wlan.radio.receiver.ignoreInterference = false

# don't send ack
Floorplan.host[*].wlan.mac.useAck = false

# hosts can't transmit and receive at the same time
Floorplan.host[*].wlan.mac.fullDuplex = false 

# no need to model different propagation times for
# different distances
Floorplan.radioMedium.propagation.typename = "ConstantTimePropagation"

# optimize simulation creating a neighbour cache
# so that every node does not send the message to all
# nodes just for them to ignore it
Floorplan.radioMedium.rangeFilter =  "communicationRange"
Floorplan.radioMedium.neighborCache.typename="GridNeighborCache"
Floorplan*.radioMedium.neighborCache.cellSizeX = 1m
Floorplan*.radioMedium.neighborCache.cellSizeY = 1m
Floorplan*.radioMedium.neighborCache.cellSizeZ = 0m
#*.radioMedium.neighborCache.range = 10m
#*.radioMedium.neighborCache.maxNumOfPointsPerQuadrant = 5000

# hosts are stationary so no need to refill
# their neighbour caches
Floorplan.radioMedium.neighborCache.refillPeriod = 10000s


# we don't care about statistics from radioMedium...
Floorplan.radioMedium.**.statistic-recording = false
Floorplan.radioMedium.**.scalar-recording = false

# ... and from all this stuff either
Floorplan.host[*].wlan.mac.linkBroken.statistic-recording = false
Floorplan.host[*].wlan.mac.linkBroken.bin-recording = false
Floorplan.host[*].wlan.mac.passedUpPk.statistic-recording = false
Floorplan.host[*].wlan.mac.passedUpPk.scalar-recording = false
Floorplan.host[*].wlan.mac.passedUpPk.vector-recording = false
Floorplan.host[*].wlan.mac.sentDownPk.statistic-recording = false
Floorplan.host[*].wlan.mac.sentDownPk.scalar-recording = false
Floorplan.host[*].wlan.mac.sentDownPk.vector-recording = false
Floorplan.host[*].wlan.mac.rcvdPkFromHl.statistic-recording = false
Floorplan.host[*].wlan.mac.rcvdPkFromLl.statistic-recording = false
Floorplan.host[*].wlan.mac.packetDropInterfaceDown.statistic-recording = false
Floorplan.host[*].wlan.mac.packetDropNotAddressedToUs.statistic-recording = false
Floorplan.host[*].wlan.mac.packetDropIncorrectlyReceived.result-recording-modes = count
Floorplan*.host[*].wlan.mac.queue.*.result-recording-modes = -
Floorplan.host[*].wlan.mac.queue.*.scalar-recording = false
Floorplan.host[*].wlan.radio.*.statistic-recording = false
Floorplan.host[*].wlan.radio.*.scalar-recording = false
Floorplan.host[*].wlan.radio.*.vector-recording = false

### GUI ###
# message waves visibility
Floorplan.visualizer.*.mediumVisualizer.displaySignals = true 
#*.visualizer.*.mediumVisualizer.signalFadingDistance = 13m # radq of the communication rage is good

# show ranges in GUI
Floorplan.visualizer.*.mediumVisualizer.displayCommunicationRanges = true # ranges circles

Floorplan.host[*].mobility.initFromDisplayString = false # ignore displaystring for position

[Config validation]
description = simplified scenario for validating the simulator

[Config singleQueue_validation]
extends = validation
description = Single queue with 10 hosts evenly spaced on a line
Floorplan.numHosts = 10
Floorplan.host[*].procUnit.p = 0.2


# hosts initial Xs
Floorplan.host[0].mobility.initialX = 5m
Floorplan.host[1].mobility.initialX = 10m
Floorplan.host[2].mobility.initialX = 15m
Floorplan.host[3].mobility.initialX = 20m
Floorplan.host[4].mobility.initialX = 25m
Floorplan.host[5].mobility.initialX = 30m
Floorplan.host[6].mobility.initialX = 35m
Floorplan.host[7].mobility.initialX = 40m
Floorplan.host[8].mobility.initialX = 45m
Floorplan.host[9].mobility.initialX = 50m

# hosts initial Ys
Floorplan.host[*].mobility.initialY = 10m

Floorplan.host[*].wlan.radio.transmitter.communicationRange = 6m #communication range
Floorplan.visualizer.*.mediumVisualizer.signalFadingDistance = 2.5m # radq of the communication rage is good

[Config star5to1_validation]
extends = validation
Floorplan.host[*].procUnit.p=${p=0.05..0.95 step 0.05}

# 200m x 200m  floorplan
Floorplan.width = 200m
Floorplan.height= 200m


Floorplan.host[*].mobility.constraintAreaMinX = 0m
Floorplan.host[*].mobility.constraintAreaMinY = 0m
Floorplan.host[*].mobility.constraintAreaMinZ = 0m
Floorplan.host[*].mobility.constraintAreaMaxX = 200m
Floorplan.host[*].mobility.constraintAreaMaxY = 200m
Floorplan.host[*].mobility.constraintAreaMaxZ = 0m

# every hosts except the one in the middle has the message
Floorplan.host[1].procUnit.hasInitToken=1
Floorplan.host[1].stat="green"
Floorplan.host[2].procUnit.hasInitToken=1
Floorplan.host[2].stat="green"
Floorplan.host[3].procUnit.hasInitToken=1
Floorplan.host[3].stat="green"
Floorplan.host[4].procUnit.hasInitToken=1 
Floorplan.host[4].stat="green"
Floorplan.host[5].procUnit.hasInitToken=1 
Floorplan.host[5].stat="green"


Floorplan.host[*].wlan.radio.transmitter.communicationRange = 110m #communication range
Floorplan.visualizer.*.mediumVisualizer.signalFadingDistance = 11m # radq of the communication rage is good

Floorplan.host[0].mobility.initialX = 100m
Floorplan.host[0].mobility.initialY = 100m

Floorplan.host[1].mobility.initialX = 200m
Floorplan.host[1].mobility.initialY = 100m

Floorplan.host[2].mobility.initialX = 130m
Floorplan.host[2].mobility.initialY = 5m

Floorplan.host[3].mobility.initialX = 20m
Floorplan.host[3].mobility.initialY = 42m

Floorplan.host[4].mobility.initialX = 20m
Floorplan.host[4].mobility.initialY = 158m

Floorplan.host[5].mobility.initialX = 130m
Floorplan.host[5].mobility.initialY = 195m

[Config base]
# we set differents RNGs for X and Y
Floorplan.host[*].mobility.initialX = uniform(0m, 100m,1)
Floorplan.host[*].mobility.initialY = uniform(0m, 100m,2)
description = 100 hosts randomly placed on the floorplan
Floorplan.numHosts = 100

# TODO: change according to desired confidence interval
repeat = 10

# Broadcast radius
Floorplan.host[*].wlan.radio.transmitter.communicationRange = 10m
#Floorplan.host[*].wlan.radio.transmitter.communicationRange = ${R=2..20 step 2}m

# per-slot broadcast probability
Floorplan.host[*].procUnit.p = 0.8 # CHANGE!!!
#Floorplan.host[*].procUnit.p = ${p=0.05..0.95 step 0.1} # CHANGE!!!

[Config small]
description = 100 hosts dropped randomly on a 10mx10m floorplan
extends = base

# we set differents RNGs for X and Y
Floorplan.host[*].mobility.initialX = uniform(0m, 10m,1)
Floorplan.host[*].mobility.initialY = uniform(0m, 10m,2)

Floorplan.height = 10m
Floorplan.width = 10m
Floorplan.host[*].wlan.radio.transmitter.communicationRange = 2m

Floorplan.host[*].mobility.constraintAreaMaxX = 10m
Floorplan.host[*].mobility.constraintAreaMaxY = 10m

[Config big]
description = 100 hosts dropped randomly on a 100mx100m floorplan
extends = base
Floorplan.height = 100m
Floorplan.width = 100m
# we set differents RNGs for X and Y
Floorplan.host[*].mobility.initialX = uniform(0m, 100m,1)
Floorplan.host[*].mobility.initialY = uniform(0m, 100m,2)

Floorplan.host[*].wlan.radio.transmitter.communicationRange = 30m

Floorplan.host[*].mobility.constraintAreaMaxX = 100m
Floorplan.host[*].mobility.constraintAreaMaxY = 100m




# these last two configurations are for convenience
# of copy-paste to create the two validation configs
[Config single]
description = Single queue with 5 hosts evenly spaced on a line
Floorplan.numHosts = 5 #numer of hosts
repeat = 5 # 2 repetition, 2 differents hosts placements
# hosts initial Xs
Floorplan.host[0].mobility.initialX = 10m
Floorplan.host[1].mobility.initialX = 20m
Floorplan.host[2].mobility.initialX = 30m
Floorplan.host[3].mobility.initialX = 40m
Floorplan.host[4].mobility.initialX = 50m

# hosts initial Ys
Floorplan.host[*].mobility.initialY = 10m

Floorplan.host[*].wlan.radio.transmitter.communicationRange = 15m #communication range
Floorplan.visualizer.*.mediumVisualizer.signalFadingDistance = 4m # radq of the communication rage is good
