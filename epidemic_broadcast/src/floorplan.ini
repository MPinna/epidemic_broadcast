##############################################################################
# General configurations.
##############################################################################
[General]
network = Floorplan
sim-time-limit = 1200s
seed-set = ${repetition}
num-rngs = 3
Floorplan.host[*].procUnit.rng-0 = 0
Floorplan.host[*].mobility.rng-1 = 1
Floorplan.host[*].mobility.rng-2 = 2
Floorplan.vector-recording = true

# floorplan size
Floorplan.height = 100m
Floorplan.width = 100m

# lower bound for hosts coordinates
Floorplan.host[*].mobility.constraintAreaMinX = 0m
Floorplan.host[*].mobility.constraintAreaMinY = 0m
Floorplan.host[*].mobility.constraintAreaMinZ = 0m

# all devices placed on the floorplan at the same height
Floorplan.host[*].mobility.initialZ = 0m
Floorplan.host[*].mobility.constraintAreaMaxZ = 0m

# time slot duration in seconds
Floorplan.host[*].procUnit.slotLength = 1

# default success probability for the Bernoullian RV
Floorplan.host[*].procUnit.p = 1

# allows for node status lifecycle modeling (up, down, etc.)
Floorplan.host[*].hasStatus = true

# hosts are stationary on the floorplan
Floorplan.host[*].mobility.typename = "StationaryMobility" 

# host[0] produces the first message and starts the broadcast
Floorplan.host[0].procUnit.hasInitToken = 1		# set initial trasmitter token
Floorplan.host[0].stat = "green"				# set the status of the initial transmitter

# set UnitDisk as radio module for the hosts
Floorplan*.host[*].wlan.radio.typename = "UnitDiskRadio"

# hosts bitrate must be set high enough so that transission
# is completed within 1 time slot: 1 Mpbs is good enoguh
# and is also realistic with respect to Bluetooth LE standards
Floorplan.host[*].**.bitrate = 1Mbps

# a transmission can last as long as the entire time slot
Floorplan.radioMedium.mediumLimitCache.maxTransmissionDuration = 1s

# we want to model collisions: take into account interferences
Floorplan.host[*].wlan.radio.receiver.ignoreInterference = false

# do not send back ack messages when broadcast is received
Floorplan.host[*].wlan.mac.useAck = false

# hosts can not transmit and receive at the same time
Floorplan.host[*].wlan.mac.fullDuplex = false 

# model propagation time to be independent of the traveled distance
Floorplan.radioMedium.propagation.typename = "ConstantTimePropagation"

# optimize simulation creating a neighbouring nodes cache so that
# each node does not have to send the message to all the nodes
# on the floorplan
Floorplan.radioMedium.rangeFilter =  "communicationRange"
Floorplan.radioMedium.neighborCache.typename = "GridNeighborCache"
Floorplan*.radioMedium.neighborCache.cellSizeX = 1m
Floorplan*.radioMedium.neighborCache.cellSizeY = 1m
Floorplan*.radioMedium.neighborCache.cellSizeZ = 0m

# hosts are stationary on the floorplan so there is no need to refresh
# their neighbouring nodes cache
Floorplan.radioMedium.neighborCache.refillPeriod = 10000s

# we do not care about statistics generated by the radioMedium
Floorplan.radioMedium.**.statistic-recording = false
Floorplan.radioMedium.**.scalar-recording = false

# unneeded statistics generated by INET
Floorplan.host[*].wlan.mac.linkBroken.statistic-recording = false
Floorplan.host[*].wlan.mac.linkBroken.bin-recording = false
Floorplan.host[*].wlan.mac.passedUpPk.statistic-recording = false
Floorplan.host[*].wlan.mac.passedUpPk.scalar-recording = false
Floorplan.host[*].wlan.mac.passedUpPk.vector-recording = false
Floorplan.host[*].wlan.mac.sentDownPk.statistic-recording = false
Floorplan.host[*].wlan.mac.sentDownPk.scalar-recording = false
Floorplan.host[*].wlan.mac.sentDownPk.vector-recording = false
Floorplan.host[*].wlan.mac.rcvdPkFromHl.statistic-recording = false
Floorplan.host[*].wlan.mac.rcvdPkFromLl.statistic-recording = false
Floorplan.host[*].wlan.mac.packetDropInterfaceDown.statistic-recording = false
Floorplan.host[*].wlan.mac.packetDropNotAddressedToUs.statistic-recording = false
Floorplan.host[*].wlan.mac.packetDropIncorrectlyReceived.result-recording-modes = count
Floorplan*.host[*].wlan.mac.queue.*.result-recording-modes = -
Floorplan.host[*].wlan.mac.queue.*.scalar-recording = false
Floorplan.host[*].wlan.radio.*.statistic-recording = false
Floorplan.host[*].wlan.radio.*.scalar-recording = false
Floorplan.host[*].wlan.radio.*.vector-recording = false

##############################################################################
# General GUI configurations.
##############################################################################

# propagating signals are visualized as animated disks
Floorplan.visualizer.*.mediumVisualizer.displaySignals = true 

# communication and interference ranges are displayed as circles around nodes 
Floorplan.visualizer.*.mediumVisualizer.displayCommunicationRanges = true

# ignore displaystring for position
# the position can be given in the initialX, initialY and initialZ parameters
Floorplan.host[*].mobility.initFromDisplayString = false

##############################################################################
# validation
##############################################################################
[Config validation]
description = Simplified scenario for validating the simulator.

##############################################################################
# singleQueue_validation
##############################################################################
[Config singleQueue_validation]
extends = validation
description = Single queue with 10 hosts evenly spaced on a line.

# number of hosts dropped on the floorplan
Floorplan.numHosts = 10

# Bernullian RV success probability
Floorplan.host[*].procUnit.p = 0.2

# hosts initial X coordinates: 10 hosts evenly spaced on a line
Floorplan.host[0].mobility.initialX = 5m
Floorplan.host[1].mobility.initialX = 10m
Floorplan.host[2].mobility.initialX = 15m
Floorplan.host[3].mobility.initialX = 20m
Floorplan.host[4].mobility.initialX = 25m
Floorplan.host[5].mobility.initialX = 30m
Floorplan.host[6].mobility.initialX = 35m
Floorplan.host[7].mobility.initialX = 40m
Floorplan.host[8].mobility.initialX = 45m
Floorplan.host[9].mobility.initialX = 50m

# hosts initial Y coordinates: 10 hosts evenly spaced on a line
Floorplan.host[*].mobility.initialY = 10m

# set radio module transmitter communication range
Floorplan.host[*].wlan.radio.transmitter.communicationRange = 6m

# distance parameter for exponential signal intensity decreasing
Floorplan.visualizer.*.mediumVisualizer.signalFadingDistance = 2.5m

##############################################################################
# star5to1_validation
##############################################################################
[Config star5to1_validation]
extends = validation

# number of hosts dropped on the floorplan
Floorplan.numHosts = 6

# Bernullian RV success probability
Floorplan.host[*].procUnit.p = ${p = 0.05..0.95 step 0.05}

# 200m x 200m  floorplan
Floorplan.width = 200m
Floorplan.height = 200m

# min max positions of the constraint area, unconstrained by default
Floorplan.host[*].mobility.constraintAreaMinX = 0m
Floorplan.host[*].mobility.constraintAreaMaxX = 200m
Floorplan.host[*].mobility.constraintAreaMinY = 0m
Floorplan.host[*].mobility.constraintAreaMaxY = 200m
Floorplan.host[*].mobility.constraintAreaMinZ = 0m
Floorplan.host[*].mobility.constraintAreaMaxZ = 0m

# each host on the floorplan, except for host[0], the one in the
# middle, has the broadcast message
Floorplan.host[1].procUnit.hasInitToken = 1
Floorplan.host[1].stat = "green"
Floorplan.host[2].procUnit.hasInitToken = 1
Floorplan.host[2].stat = "green"
Floorplan.host[3].procUnit.hasInitToken = 1
Floorplan.host[3].stat = "green"
Floorplan.host[4].procUnit.hasInitToken = 1 
Floorplan.host[4].stat = "green"
Floorplan.host[5].procUnit.hasInitToken = 1 
Floorplan.host[5].stat = "green"

# set radio module transmitter communication range
Floorplan.host[*].wlan.radio.transmitter.communicationRange = 110m

# distance parameter for exponential signal intensity decreasing
Floorplan.visualizer.*.mediumVisualizer.signalFadingDistance = 11m

# position hosts on the floorplan in star formation
Floorplan.host[0].mobility.initialX = 100m
Floorplan.host[0].mobility.initialY = 100m

Floorplan.host[1].mobility.initialX = 200m
Floorplan.host[1].mobility.initialY = 100m

Floorplan.host[2].mobility.initialX = 100m
Floorplan.host[2].mobility.initialY = 0m

Floorplan.host[3].mobility.initialX = 0m
Floorplan.host[3].mobility.initialY = 100m

Floorplan.host[4].mobility.initialX = 50m
Floorplan.host[4].mobility.initialY = 200m

Floorplan.host[5].mobility.initialX = 150m
Floorplan.host[5].mobility.initialY = 200m

##############################################################################
# base
##############################################################################
[Config base]
description = 100 hosts randomly placed on the floorplan.

# change accordingly to desired confidence interval
repeat = 200

# use different RNGs for hosts X and Y coordinates
Floorplan.host[*].mobility.initialX = uniform(0m, 100m, 1)
Floorplan.host[*].mobility.initialY = uniform(0m, 100m, 2)

# number of hosts on the floorplan
Floorplan.numHosts = 100

# Bernullian RV success probability
Floorplan.host[*].procUnit.p = 0.8

# set radio module transmitter communication range
Floorplan.host[*].wlan.radio.transmitter.communicationRange = 10m

##############################################################################
# small
##############################################################################
[Config small]
description = 100 hosts dropped randomly on a 10mx10m floorplan.
extends = base

Floorplan.host[*].procUnit.p = ${p = 0.05..1 step 0.05}
Floorplan.host[*].wlan.radio.transmitter.communicationRange = ${R = 1..5 step 0.5}m

# use different RNGs for hosts X and Y coordinates
Floorplan.host[*].mobility.initialX = uniform(0m, 10m,1)
Floorplan.host[*].mobility.initialY = uniform(0m, 10m,2)

# 100m x 100m  floorplan
Floorplan.height = 10m
Floorplan.width = 10m

Floorplan.host[*].mobility.constraintAreaMaxX = 10m
Floorplan.host[*].mobility.constraintAreaMaxY = 10m

##############################################################################
# big
##############################################################################
[Config big]
description = 100 hosts dropped randomly on a 100mx100m floorplan.
extends = base

Floorplan.host[*].procUnit.p = ${p = 0.1..1 step 0.1}
Floorplan.host[*].wlan.radio.transmitter.communicationRange = ${R = 1..20 step 1}m

# use different RNGs for hosts X and Y coordinates
Floorplan.host[*].mobility.initialX = uniform(0m, 100m, 1)
Floorplan.host[*].mobility.initialY = uniform(0m, 100m, 2)

# 100m x 100m  floorplan
Floorplan.height = 100m
Floorplan.width = 100m

Floorplan.host[*].mobility.constraintAreaMaxX = 100m
Floorplan.host[*].mobility.constraintAreaMaxY = 100m

##############################################################################
# single
##############################################################################
[Config single]
description = Single queue with 5 hosts evenly spaced on a line.
repeat = 5

# number of hosts on the floorplan
Floorplan.numHosts = 5

# hosts initial X coordinates: 5 hosts evenly spaced on a line
Floorplan.host[0].mobility.initialX = 10m
Floorplan.host[1].mobility.initialX = 20m
Floorplan.host[2].mobility.initialX = 30m
Floorplan.host[3].mobility.initialX = 40m
Floorplan.host[4].mobility.initialX = 50m

# hosts initial Y coordinates: 5 hosts evenly spaced on a line
Floorplan.host[*].mobility.initialY = 10m

Floorplan.host[*].wlan.radio.transmitter.communicationRange = 15m
Floorplan.visualizer.*.mediumVisualizer.signalFadingDistance = 4m